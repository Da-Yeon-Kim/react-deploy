{"version":3,"file":"static/js/321.02a5c604.chunk.js","mappings":"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","sources":["api/hooks/categories.mock.ts","api/hooks/members.mock.ts","api/hooks/products.mock.ts","mocks/browser.ts"],"sourcesContent":["import { rest } from 'msw';\n\nimport { getCategoriesPath } from './useGetCategorys';\n\nexport const categoriesMockHandler = [\n  rest.get(getCategoriesPath(), (_, res, ctx) => {\n    return res(ctx.json(CATEGORIES_RESPONSE_DATA));\n  }),\n];\n\nconst CATEGORIES_RESPONSE_DATA = [\n  {\n    id: 2920,\n    name: '생일',\n    description: '감동을 높여줄 생일 선물 리스트',\n    color: '#5949a3',\n    imageUrl:\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Ft1.daumcdn.net%2Fgift%2Fhome%2Ftheme%2F292020231106_MXMUB.png',\n  },\n  {\n    id: 2930,\n    name: '교환권',\n    description: '놓치면 후회할 교환권 특가',\n    color: '#9290C3',\n    imageUrl:\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Fst.kakaocdn.net%2Fproduct%2Fgift%2Fproduct%2F20240131153049_5a22b137a8d346e9beb020a7a7f4254a.jpg',\n  },\n];\n","import { rest } from 'msw';\n\nimport { BASE_URL } from '../instance';\n\ninterface User {\n  email: string;\n  password: string;\n  token?: string;\n}\n\nconst userMockList: User[] = [\n  {\n    email: 'test@example.com',\n    password: 'password1234',\n    token: 'mock-token',\n  },\n];\n\nexport const membersMockHandlers = [\n  rest.post(`${BASE_URL}/api/members/login`, async (req, res, ctx) => {\n    try {\n      const { email, password } = await req.json();\n\n      if (!email || !password) {\n        return await res(ctx.status(400), ctx.json({ message: 'Invalid input' }));\n      }\n\n      const existingUser = userMockList.find((user) => user.email === email);\n\n      if (existingUser && existingUser.password === password) {\n        return await res(\n          ctx.status(200),\n          ctx.json({ email: existingUser.email, token: existingUser.token }),\n        );\n      } else {\n        return await res(ctx.status(401), ctx.json({ message: 'Unauthorized' }));\n      }\n    } catch (error) {\n      return await res(ctx.status(500), ctx.json({ message: 'Server error' }));\n    }\n  }),\n\n  rest.post(`${BASE_URL}/api/members/register`, async (req, res, ctx) => {\n    try {\n      const { email, password } = await req.json();\n\n      if (!email || !password) {\n        return await res(ctx.status(400), ctx.json({ message: 'Invalid input' }));\n      }\n\n      const existingUser = userMockList.find((user) => user.email === email);\n\n      if (existingUser) {\n        return await res(ctx.status(409), ctx.json({ message: 'User already exists' }));\n      }\n\n      const newUser: User = { email, password, token: 'new-mock-token' };\n      userMockList.push(newUser);\n\n      return await res(ctx.status(201), ctx.json({ email: newUser.email, token: newUser.token }));\n    } catch (error) {\n      return res(ctx.status(500), ctx.json({ message: 'Server error' }));\n    }\n  }),\n];\n","import { rest } from 'msw';\n\nimport { getProductDetailPath } from './useGetProductDetail';\nimport { getProductOptionsPath } from './useGetProductOptions';\nimport { getProductsPath } from './useGetProducts';\n\nexport const productsMockHandler = [\n  rest.get(\n    getProductsPath({\n      categoryId: '2920',\n    }),\n    (_, res, ctx) => {\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\n    },\n  ),\n  rest.get(\n    getProductsPath({\n      categoryId: '2930',\n    }),\n    (_, res, ctx) => {\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\n    },\n  ),\n  rest.get(getProductDetailPath(':productId'), (_, res, ctx) => {\n    return res(ctx.json(PRODUCTS_MOCK_DATA.content[0]));\n  }),\n  rest.get(getProductOptionsPath(':productId'), (_, res, ctx) => {\n    return res(\n      ctx.json([\n        {\n          id: 1,\n          name: 'Option A',\n          quantity: 10,\n          productId: 1,\n        },\n        {\n          id: 2,\n          name: 'Option B',\n          quantity: 20,\n          productId: 1,\n        },\n      ]),\n    );\n  }),\n];\n\nconst PRODUCTS_MOCK_DATA = {\n  content: [\n    {\n      id: 3245119,\n      name: '[단독각인] 피렌체 1221 에디션 오드코롱 50ml (13종 택1)',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240215083306_8e1db057580145829542463a84971ae3.png',\n      price: 145000,\n    },\n    {\n      id: 2263833,\n      name: '외식 통합권 10만원권',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20200513102805_4867c1e4a7ae43b5825e9ae14e2830e3.png',\n      price: 100000,\n    },\n    {\n      id: 6502823,\n      name: '[선물포장/미니퍼퓸증정] 디켄터 리드 디퓨저 300ml + 메세지카드',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240215112140_11f857e972bc4de6ac1d2f1af47ce182.jpg',\n      price: 108000,\n    },\n    {\n      id: 1181831,\n      name: '[선물포장] 소바쥬 오 드 뚜왈렛 60ML',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240214150740_ad25267defa64912a7c030a7b57dc090.jpg',\n      price: 122000,\n    },\n    {\n      id: 1379982,\n      name: '[정관장] 홍삼정 에브리타임 리미티드 (10ml x 30포)',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240118135914_a6e1a7442ea04aa49add5e02ed62b4c3.jpg',\n      price: 133000,\n    },\n  ],\n  number: 0,\n  totalElements: 5,\n  size: 10,\n  last: true,\n};\n","import { setupWorker } from 'msw';\n\nimport { categoriesMockHandler } from '@/api/hooks/categories.mock';\nimport { membersMockHandlers } from '@/api/hooks/members.mock';\nimport { productsMockHandler } from '@/api/hooks/products.mock';\n\nexport const worker = setupWorker(\n  ...categoriesMockHandler,\n  ...membersMockHandlers,\n  ...productsMockHandler,\n);\n"],"names":["categoriesMockHandler","rest","get","getCategoriesPath","_","res","ctx","json","CATEGORIES_RESPONSE_DATA","id","name","description","color","imageUrl","userMockList","email","password","token","membersMockHandlers","post","concat","BASE_URL","async","req","status","message","existingUser","find","user","error","newUser","push","productsMockHandler","getProductsPath","categoryId","PRODUCTS_MOCK_DATA","getProductDetailPath","content","getProductOptionsPath","quantity","productId","price","number","totalElements","size","last","worker","setupWorker"],"sourceRoot":""}